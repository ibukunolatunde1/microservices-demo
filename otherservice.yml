# Get the resources and all the images in the repo and their deployment order
parameters:
  - name: services
    type: object
    default: ['currency', 'payment']

resources:
  containers:
  - container: currency
    type: ACR
    azureSubscription: SubServiceConnection
    resourceGroup: devops-test-rg
    registry: testuim
    repository: qa/currency
  - container: payment
    type: ACR
    azureSubscription: SubServiceConnection
    resourceGroup: devops-test-rg
    registry: testuim
    repository: qa/payment
# Deployment Steps as follows

# Download all the images and retag with maybe buildID & latest
variables:
- name: registry
  value:  DevContainer
# - name: repository
#   value:  $(resources.container.${{ service }}.repository)
# - name: image_tag
#   value: $(resources.container.${{ service }}.tag)
- name: containerRegistryURL
  value: acrt01.azurecr.io
# - name: repository
#   value: ${{ parameters.service }}

# Send the image to ACR03

stages:
- stage: 'PullLatesttoUATACR'
  jobs:
    - job: 'PullUAT'
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: Docker@2
        displayName: 'Pull Image from QA ACR'
        inputs:
          command: images
      - ${{ each service in parameters.services }}:
        # - task: Docker@2
        #   displayName: 'Pull Image from QA ACR'
        #   inputs:
        #     command: images
            # command: pull testuim.azurecr.io/qa/${{ service }}:$(resources.container.${{ service }}.tag)
            # argument: $(registry)/qa/${{ service }}:$(image_tag)
        - script: |
            docker login testuim.azurecr.io --username 'c9f2fea9-9e40-42c2-af7e-d74c6e7183d7' --password '3CJ7Q~N5yw1I4c1NKF_c2Dg4iUnSPDIaJzJwA' 
            docker login acrt01.azurecr.io --username 'c9f2fea9-9e40-42c2-af7e-d74c6e7183d7' --password '3CJ7Q~N5yw1I4c1NKF_c2Dg4iUnSPDIaJzJwA' 
            docker pull testuim.azurecr.io/qa/${{ service }}:$(resources.container.${{ service }}.tag)
            docker tag testuim.azurecr.io/qa/${{ service }}:$(resources.container.${{ service }}.tag) ${{ variables.containerRegistryURL }}/uat/${{ service }}:latest'
            docker image push --all-tags ${{ variables.containerRegistryURL }}/uat/${{ service }}
          workingDirectory: $(Build.SourcesDirectory)
        # - task: Docker@2
        #   displayName: 'Retag Image'
        #   inputs:
        #     command: tag
        #     containerRegistry: ${{ variables.registry }}
        #     repository: qa/${{ service }}
        #     arguments: '${{ service }}:$(resources.container.${{ service }}.tag) ${{ variables.containerRegistryURL }}/uat/${{ service }}:$(resources.container.${{ service }}.tag)_rc'
            # docker tag testuim.azurecr.io/qa/${{ service }}:$(resources.container.${{ service }}.tag) ${{ variables.containerRegistryURL }}/uat/${{ service }}:$(resources.container.${{ service }}.tag)_rc'


        # - task: Docker@2
        #   displayName: 'Retag Image'
        #   inputs:
        #     command: tag
        #     containerRegistry: ${{ variables.registry }}
        #     repository: qa/${{ service }}
        #     arguments: '${{ service }}:$(resources.container.${{ service }}.tag) ${{ variables.containerRegistryURL }}/uat/${{ service }}:latest'
        # - task: Docker@2
        #   displayName: 'Push Image to ACR'
        #   inputs:
        #     containerRegistry: TestingContainer
        #     repository: uat/${{ service }}
        #     command: push
        #     tags: |
        #       ${{ variables.image_tag }}_rc
        #       latest

# - stage: 'DeployService'
#   jobs:
#   - job: 'deployservice'
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     - ${{ each service in parameters.services }}:
#       # - task: HelmDeploy@0
#       #   inputs:
#       #     azureSubscription:
#       #     azureResourceGroup:
#       #     kubernetesCluster:
#       #     namespace:
#       #     chartType:
#       #     chartPath: $(Build.SourcesDirectory)/HUGO/${{ parameter.service }}_directory
#       #     valueFile:
#       #     releaseName: ${{ parameters.service }}
#       #     arguments: --set=env=${{ parameters.kubeNamespace }},image.repository=${{ parameters.service }},image.tag=$(resources.container.${{ parameters.service }}.tag)
#       - script: echo "Running ${{ service }} now"        
